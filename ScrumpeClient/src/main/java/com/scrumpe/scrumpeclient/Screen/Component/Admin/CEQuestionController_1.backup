/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.scrumpe.scrumpeclient.Screen.Component.Admin;

import com.scrumpe.scrumpeclient.DB.DAO.AnswerDAO;
import com.scrumpe.scrumpeclient.DB.DAO.Callback.DAOCallBack;
import com.scrumpe.scrumpeclient.DB.DAO.QuestionDAO;
import com.scrumpe.scrumpeclient.DB.Entity.Answer;
import com.scrumpe.scrumpeclient.DB.Entity.Question;
import com.scrumpe.scrumpeclient.Screen.Base.ComponentBase;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ResourceBundle;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.VPos;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.TitledPane;
import javafx.scene.control.ToggleButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import org.bson.types.ObjectId;

/**
 * FXML Controller class
 *
 * @author Max Verhoeven
 */
public class CEQuestionController extends ComponentBase {

    ObservableList<TitledPane> panes;
    boolean isEditing = false;
    @FXML
    private Button deleteQBtn, addAnswer, deleteAllAnswers;
    @FXML
    private Label questionLabel;
    @FXML
    private TextArea questionTextField,explanationField;
    @FXML
    private VBox answerContainer;
    CourseEditorController cec;
    Question question;
    public Question getQuestion() {
        return question;
    }
    
    /**
     * Initializes the controller class.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        deleteQBtn.setOnAction((event) -> {
            panes.remove(componentRootAsTitlePane);
        });
        addAnswer.setOnAction((event) -> {
            addAnswer();
        });
        deleteAllAnswers.setOnAction((event) -> {
            answerContainer.getChildren().clear();
        });
        questionTextField.textProperty().addListener((observable, oldValue, newValue) -> {
            question.setQuestion(newValue);
        });
        explanationField.textProperty().addListener((observable, oldValue, newValue) -> {
            question.setExplanation(newValue);
        });
        answerContainer.getChildren().addListener((ListChangeListener.Change<? extends Node> c) -> {
           handleAnswerChanges(c);
        });
    }

    @Override
    public void setupLayout() {
    }

    void setData(ObservableList<TitledPane> panes) {
        this.panes = panes;
    }
    public void setExistingData(Question data){
        question =  data;
        questionLabel.setText(question.getQuestion());
        questionTextField.setText(question.getQuestion());
        explanationField.setText(question.getExplanation());
        if(question.getAnswers() == null) question.setAnswers(new ArrayList<>());
        setExistingAnswers(question.getAnswers());
    }
    private void editQuestion(boolean editing) {
    }

    private void addAnswer() {
        addAnswer(null);
    }
    private void addAnswer(Answer ans) {
        if(ans == null){
            ans = new Answer();
        }
        String answerTitle = ans.getAnswer();
        boolean correct = ans.isCorrectForExcel;
        if(ans.getId()!=null){
            for(ObjectId oid : question.getCorrectAnswerIds()){
                if(oid.equals(ans.getId())){
                    correct = true;
                }
            }
        }
        HBox answer = new HBox();
        TextField answerfield = new TextField(answerTitle);
        Button deleteAnswer = new Button("Delete");
        answer.setUserData(ans);
        deleteAnswer.setOnAction((event) -> {
            answerContainer.getChildren().remove(answer);
        });
        String correctText = (correct ? "is correct" : "is not correct");
        ToggleButton isCorrect = new ToggleButton(correctText);
        String correctStyle = (correct ? "-fx-background-color:limegreen; -fx-text-fill:white" : "-fx-background-color:LightCoral; -fx-text-fill:white");
        isCorrect.setStyle(correctStyle);
         isCorrect.setSelected(correct);
        isCorrect.setPrefWidth(100.0);
        isCorrect.onMouseEnteredProperty().set((event) -> {
            isCorrect.setOpacity(0.8);
        });
        isCorrect.onMouseExitedProperty().set((event) -> {
            isCorrect.setOpacity(1.0);
        });
        isCorrect.setOnAction((event) -> {
            if (isCorrect.isSelected()) {
                isCorrect.setStyle("-fx-background-color:limegreen");
                isCorrect.setText("is correct");
            } else {
               isCorrect.setStyle("-fx-background-color:LightCoral; -fx-text-fill:white");
                isCorrect.setText("is not Correct");
            }
        });
        answer.getChildren().add(answerfield);
        answer.getChildren().add(isCorrect);
        answer.getChildren().add(deleteAnswer);
        answer.setMaxWidth(Double.MAX_VALUE);
        answer.setSpacing(5.0);
        answer.setPadding(new Insets(5,0,0,0));
        HBox.setHgrow(answerfield, Priority.ALWAYS);
        answerContainer.getChildren().add(answer);

    }

    private void setExistingAnswers(List<Answer> answers) {
        for (Iterator<Answer> iterator = answers.iterator(); iterator.hasNext();) {
            Answer next = iterator.next();
            addAnswer(next);
        }
    }
    public Question getQuestions(){
        ObservableList<Node> children = answerContainer.getChildren();
        AnswerDAO dao = data.getDAO(AnswerDAO.class);
//        //check if 
//        
//        List<Answer> anslist = new ArrayList<>();
//        List<Answer> correctAnswers = new ArrayList<>();
//        for (Iterator<Node> iterator = children.iterator(); iterator.hasNext();) {
//            HBox next = (HBox) iterator.next();
//            TextField ans = (TextField) next.getChildren().get(0);
//            ToggleButton isCorrect = (ToggleButton) next.getChildren().get(1);
//            if(isCorrect.isSelected()){
//               correctAnswers.add(s);
//            }
//        }
//         dao.createAnswers(new DAOCallBackImpl(this,correctAnswers), anslist);
return null;
    }
    public void saveQuestion(Question q){
        q.setQuestion(questionLabel.getText());
        q.setExplanation(explanationField.getText());
        QuestionDAO dao = data.getDAO(QuestionDAO.class);
        dao.saveQuestion(new DAOCallBackImpl1(this), q);
    }
    public void returnQuestion(Question q){
        cec.addQtoCourse(q);
    }

    @Override
    public void onChanged() {
    }

    private void handleAnswerChanges(ListChangeListener.Change<? extends Node> c) {
        boolean next = c.next();
        List<? extends Node> removed = c.getRemoved();
        List<? extends Node> addedSubList = c.getAddedSubList();
        for (Node node : removed) {
            HBox hbox = (HBox)node;
            ObservableList<Node> children = hbox.getChildren();
           
            int indexOf = c.getFrom();
            question.getAnswers().remove(indexOf);
        }
        for (Node node : addedSubList) {
            HBox hbox = (HBox)node;
            Answer newA = (Answer) hbox.getUserData();
            ObservableList<Node> children = hbox.getChildren();
            TextField get = (TextField) children.get(0);
            ToggleButton get2 = (ToggleButton) children.get(1);
            get2.addEventHandler(MouseEvent.MOUSE_RELEASED, (event) -> {
                List<Answer> answers = question.getAnswers();
                    newA.isCorrectForExcel = get2.isSelected();
                    question.getAnswers().set(question.getAnswers().indexOf(newA), newA);
            });
              
            get.textProperty().addListener((observable, oldValue, newValue) -> {
                newA.setAnswer(newValue);
                question.getAnswers().set(question.getAnswers().indexOf(newA), newA);
            });
            if(!question.getAnswers().contains((Answer)hbox.getUserData())){
                question.getAnswers().add(newA);
            }
        }
    }

    void hidePane(boolean hide) {
        if(hide){
          
        }else{
        }
    }
    
    private static class DAOCallBackImpl implements DAOCallBack<List<Answer>> {

        CEQuestionController cb;
        private List<Answer> correct;
        public DAOCallBackImpl(CEQuestionController cb,List<Answer> correct) {
            this.cb = cb;
            this.correct = correct;
        }
        @Override
        public void dbResult(List<Answer> results) {
            Question q = new Question();
            q.setAnswers(results);
            List<ObjectId> correctAns = new ArrayList<>();
            for (Answer result : results) {
                for (Answer answer : correct) {
                    if(result.getAnswer().equals(answer.getAnswer())){
                        correctAns.add(result.getId());
                    }
                }
            }
            ObjectId[] toArray = correctAns.toArray(new ObjectId[correctAns.size()]);
            q.setCorrectAnswerIds(toArray);
            cb.saveQuestion(q);
        }
    }

    private static class DAOCallBackImpl1 implements DAOCallBack<Question> {
        CEQuestionController cec;
        public DAOCallBackImpl1(CEQuestionController cec) {
        this.cec = cec;
        }

        @Override
        public void dbResult(Question result) {
            cec.returnQuestion(result);
        }
    }
}

